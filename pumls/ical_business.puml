@startuml icalendar_logic
!include ical_rfc5545.puml

package "iCalendar Application Logic" {

interface ICalendarFactory {
  +createCalendar(user: User, name: String): Result<VCALENDAR>
  +importICal(data: String): Result<VCALENDAR>
  +exportICal(calendar: VCALENDAR): Result<String>
}

  class CalendarFactoryImpl {
    +createCalendar(user: User, name: String): VCALENDAR
    +importICal(data: String): VCALENDAR
    +exportICal(calendar: VCALENDAR): String
  }

interface IEventFactory {
  +createEvent(calendar: VCALENDAR, data: Map): Result<VEVENT>
  +duplicateEvent(event: VEVENT, options: DuplicationOptions): Result<VEVENT>
  +validateEvent(data: Map): Result<Boolean>
}

class EventFactoryImpl {
  +createEvent(calendar: VCALENDAR, data: Map): Result<VEVENT>
  +duplicateEvent(event: VEVENT, options: DuplicationOptions): Result<VEVENT>
  +validateEvent(data: Map): Result<Boolean>
}

interface IToDoFactory {
  +createTask(calendar: VCALENDAR, data: Map): Result<VTODO>
  +markComplete(task: VTODO): Result<Boolean>
  +assignTask(task: VTODO, user: User): Result<Boolean>
}

  class ToDoFactoryImpl {
    +createTask(calendar: VCALENDAR, data: Map): VTODO
    +markComplete(task: VTODO): Boolean
    +assignTask(task: VTODO, user: User): Boolean
  }

interface ICalendarService {
  +syncCalendar(calendar: VCALENDAR): Result<Boolean>
  +getEvents(calendar: VCALENDAR, range: DateRange): Result<List<VEVENT>>
  +getTasks(calendar: VCALENDAR): Result<List<VTODO>>
}

  class CalendarServiceImpl {
    +syncCalendar(calendar: VCALENDAR): Boolean
    +getEvents(calendar: VCALENDAR, range: DateRange): List<VEVENT>
    +getTasks(calendar: VCALENDAR): List<VTODO>
  }

}

interface IParticipationService {
  +respond(event: VEVENT, user: User, partstat: Enum): Result<Boolean>
  +delegate(event: VEVENT, from: User, to: User): Result<Boolean>
  +invite(event: VEVENT, user: User): Result<Boolean>
  +revoke(event: VEVENT, user: User): Result<Boolean>
}

class ParticipationServiceImpl {
  +respond(event: VEVENT, user: User, partstat: Enum): Boolean
  +delegate(event: VEVENT, from: User, to: User): Boolean
  +invite(event: VEVENT, user: User): Boolean
  +revoke(event: VEVENT, user: User): Boolean
}



interface IFreeBusyFactory {
  +createFreeBusy(calendar: VCALENDAR, user: User, range: DateRange): VFREEBUSY
  +validateFreeBusy(data: Map): Boolean
}

class FreeBusyFactoryImpl {
  +createFreeBusy(calendar: VCALENDAR, user: User, range: DateRange): VFREEBUSY
  +validateFreeBusy(data: Map): Boolean
}

interface ITimezoneFactory {
  +createTimezone(tzid: String, standard: STANDARD, daylight: DAYLIGHT): VTIMEZONE
  +importFromICal(data: String): VTIMEZONE
}

class TimezoneFactoryImpl {
  +createTimezone(tzid: String, standard: STANDARD, daylight: DAYLIGHT): VTIMEZONE
  +importFromICal(data: String): VTIMEZONE
}


interface IAlarmFactory {
  +createAlarm(data: Map): VALARM
  +validateAlarm(data: Map): Boolean
  +attachToEvent(event: VEVENT, alarm: VALARM): Boolean
  +attachToTask(task: VTODO, alarm: VALARM): Boolean
}

class AlarmFactoryImpl {
  +createAlarm(data: Map): VALARM
  +validateAlarm(data: Map): Boolean
  +attachToEvent(event: VEVENT, alarm: VALARM): Boolean
  +attachToTask(task: VTODO, alarm: VALARM): Boolean
}


  interface IAttachmentFactory {
    +createAttachment(data: Map): Attachment
    +validateAttachment(data: Map): Boolean
  }

  class AttachmentFactoryImpl {
    +createAttachment(data: Map): Attachment
    +validateAttachment(data: Map): Boolean
  }

  interface IAttachmentService {
    +uploadAttachment(user: User, data: Binary, meta: Map): Attachment
    +deleteAttachment(user: User, attachment: Attachment): Boolean
    +listAttachments(event: VEVENT): List<Attachment>
    +getAttachment(id: UUID): Attachment
  }

  class AttachmentServiceImpl {
    +uploadAttachment(user: User, data: Binary, meta: Map): Attachment
    +deleteAttachment(user: User, attachment: Attachment): Boolean
    +listAttachments(event: VEVENT): List<Attachment>
    +getAttachment(id: UUID): Attachment
  }


interface ICalendarPermissionService {
  +grantPermission(calendar: VCALENDAR, user: User, permission: Enum): Boolean
  +revokePermission(calendar: VCALENDAR, user: User): Boolean
  +getPermissions(calendar: VCALENDAR): List<CalendarPermission>
  +hasAccess(user: User, calendar: VCALENDAR, required: Enum): Boolean
}

class CalendarPermissionServiceImpl {
  +grantPermission(calendar: VCALENDAR, user: User, permission: Enum): Boolean
  +revokePermission(calendar: VCALENDAR, user: User): Boolean
  +getPermissions(calendar: VCALENDAR): List<CalendarPermission>
  +hasAccess(user: User, calendar: VCALENDAR, required: Enum): Boolean
}

interface ICalendarSharingService {
  +shareCalendar(calendar: VCALENDAR, withUser: User, permission: Enum): Boolean
  +revokeShare(calendar: VCALENDAR, fromUser: User): Boolean
  +getSharedUsers(calendar: VCALENDAR): List<CalendarShare>
}

class CalendarSharingServiceImpl {
  +shareCalendar(calendar: VCALENDAR, withUser: User, permission: Enum): Boolean
  +revokeShare(calendar: VCALENDAR, fromUser: User): Boolean
  +getSharedUsers(calendar: VCALENDAR): List<CalendarShare>
}

interface IWorkspaceSyncService {
  +syncWorkspaceCalendars(workspace: Workspace): Boolean
  +syncTasksWithEvents(workspace: Workspace): Boolean
  +getSyncStatus(workspace: Workspace): String
  +createResource(path: String, type: Enum, owner: User): WebDAVResource
  +propfind(path: String): Map
  +proppatch(path: String, properties: Map): Boolean
  +lock(resource: WebDAVResource, user: User): WebDAVLock
  +unlock(lockToken: String): Boolean
  +sync(calendar: VCALENDAR, syncToken: String): Map
  +getQuota(user: User): WebDAVQuota
}


class WorkspaceSyncServiceImpl {
  +syncWorkspaceCalendars(workspace: Workspace): Boolean
  +syncTasksWithEvents(workspace: Workspace): Boolean
  +getSyncStatus(workspace: Workspace): String
  +createResource(path: String, type: Enum, owner: User): WebDAVResource
  +propfind(path: String): Map
  +proppatch(path: String, properties: Map): Boolean
  +lock(resource: WebDAVResource, user: User): WebDAVLock
  +unlock(lockToken: String): Boolean
  +sync(calendar: VCALENDAR, syncToken: String): Map
  +getQuota(user: User): WebDAVQuota
}
interface IEventDuplicationService {
  +duplicate(event: VEVENT, options: DuplicationOptions): VEVENT
}

class EventDuplicationServiceImpl {
  +duplicate(event: VEVENT, options: DuplicationOptions): VEVENT
}
interface IICalMapper {
  +toICalEvent(event: VEVENT): String
  +toICalTask(task: VTODO): String
  +toICalCalendar(calendar: VCALENDAR): String
  +fromICal(data: String): VCALENDAR
  +fromICalEvent(data: String): VEVENT
  +fromICalTask(data: String): VTODO
}

class ICalMapperImpl {
  +toICalEvent(event: VEVENT): String
  +toICalTask(task: VTODO): String
  +toICalCalendar(calendar: VCALENDAR): String
  +fromICal(data: String): VCALENDAR
  +fromICalEvent(data: String): VEVENT
  +fromICalTask(data: String): VTODO
}

IICalMapper <|.. ICalMapperImpl

ICalMapperImpl --> VCALENDAR
ICalMapperImpl --> VEVENT
ICalMapperImpl --> VTODO
IEventDuplicationService <|.. EventDuplicationServiceImpl
EventFactoryImpl --> IEventDuplicationService : uses
EventFactoryImpl --> EventDuplicationServiceImpl : delegates duplication
EventDuplicationServiceImpl --> VEVENT : clones
EventDuplicationServiceImpl --> VCALENDAR : target
EventDuplicationServiceImpl --> Attachment : includes
EventDuplicationServiceImpl --> EventParticipation : optionally
EventDuplicationServiceImpl --> VTODO : if linked
  IAttachmentFactory <|.. AttachmentFactoryImpl
  IAttachmentService <|.. AttachmentServiceImpl

  AttachmentFactoryImpl --> Attachment
  AttachmentServiceImpl --> Attachment
  AttachmentServiceImpl --> VEVENT
  AttachmentServiceImpl --> User
IWebDAVResourceService <|.. WebDAVResourceServiceImpl

WebDAVResourceServiceImpl --> WebDAVResource
WebDAVResourceServiceImpl --> WebDAVProperty
WebDAVResourceServiceImpl --> WebDAVLock
WebDAVResourceServiceImpl --> WebDAVQuota
WebDAVResourceServiceImpl --> WebDAVReport
WebDAVResourceServiceImpl --> WebDAVAuditLog
WebDAVResourceServiceImpl --> User
WebDAVResourceServiceImpl --> VCALENDAR

interface IRecurrenceService {
  +expandOccurrences(event: VEVENT, range: DateRange): List<VEVENT>
  +expandTaskOccurrences(task: VTODO, range: DateRange): List<VTODO>
  +validateRule(rrule: String): Boolean
  +getNextOccurrence(rrule: String, from: DateTime): DateTime
}

class RecurrenceServiceImpl {
  +expandOccurrences(event: VEVENT, range: DateRange): List<VEVENT>
  +expandTaskOccurrences(task: VTODO, range: DateRange): List<VTODO>
  +validateRule(rrule: String): Boolean
  +getNextOccurrence(rrule: String, from: DateTime): DateTime
}


interface IInvitationFactory {
  +createInvitation(event: VEVENT, user: User): Result<EventInvitation>
  +expireInvitation(invitation: EventInvitation): Result<Boolean>
  +generateRSVPToken(invitation: EventInvitation): Result<String>
  +validateRSVPToken(token: String): Result<Boolean>
  +getInvitationByToken(token: String): Result<EventInvitation>
}

class InvitationFactoryImpl {
  +createInvitation(event: VEVENT, user: User): EventInvitation
  +expireInvitation(invitation: EventInvitation): Boolean
  +generateRSVPToken(invitation: EventInvitation): String
  +validateRSVPToken(token: String): Boolean
  +getInvitationByToken(token: String): EventInvitation
}
interface IReminderService {
  +listReminders(user: User): List<VALARM>
  +createReminder(user: User, data: Map): VALARM
  +deleteReminder(user: User, alarm: VALARM): Boolean
  +getUpcomingReminders(user: User, now: DateTime): List<VALARM>
}

class ReminderServiceImpl {
  +listReminders(user: User): List<VALARM>
  +createReminder(user: User, data: Map): VALARM
  +deleteReminder(user: User, alarm: VALARM): Boolean
  +getUpcomingReminders(user: User, now: DateTime): List<VALARM>
}
interface IAuditService {
  +log(user: User, action: String, resourcePath: String): Boolean
  +getLogs(user: User): List<WebDAVAuditLog>
}

class AuditServiceImpl {
  +log(user: User, action: String, resourcePath: String): Boolean
  +getLogs(user: User): List<WebDAVAuditLog>
}
interface IDomainValidator {
  +validateEventData(data: Map): Boolean
  +validateTaskData(data: Map): Boolean
  +validateFreeBusyData(data: Map): Boolean
  +validateAlarmData(data: Map): Boolean
  +validateInvitation(event: VEVENT, user: User): Boolean
  +validateUserPermissions(user: User, calendar: VCALENDAR, action: String): Boolean
}

class DomainValidatorImpl {
  +validateEventData(data: Map): Boolean
  +validateTaskData(data: Map): Boolean
  +validateFreeBusyData(data: Map): Boolean
  +validateAlarmData(data: Map): Boolean
  +validateInvitation(event: VEVENT, user: User): Boolean
  +validateUserPermissions(user: User, calendar: VCALENDAR, action: String): Boolean
}
interface IResult<T> {
  +success: Boolean
  +data: T
  +error: ErrorDetail
}

class Result<T> {
  +success: Boolean
  +data: T
  +error: ErrorDetail
}

class ErrorDetail {
  +code: String
  +message: String
  +details: Map
}
IDomainValidator <|.. DomainValidatorImpl

EventFactoryImpl --> IDomainValidator
ToDoFactoryImpl --> IDomainValidator
FreeBusyFactoryImpl --> IDomainValidator
AlarmFactoryImpl --> IDomainValidator
InvitationFactoryImpl --> IDomainValidator
ParticipationServiceImpl --> IDomainValidator
IAuditService <|.. AuditServiceImpl
AuditServiceImpl --> WebDAVAuditLog
AuditServiceImpl --> User
IReminderService <|.. ReminderServiceImpl

ReminderServiceImpl --> VALARM
ReminderServiceImpl --> User

interface IWebDAVResourceService
IInvitationFactory <|.. InvitationFactoryImpl
InvitationFactoryImpl --> EventInvitation
InvitationFactoryImpl --> VEVENT
InvitationFactoryImpl --> User

IRecurrenceService <|.. RecurrenceServiceImpl

RecurrenceServiceImpl --> VEVENT : expand
RecurrenceServiceImpl --> VTODO : expand
IWorkspaceSyncService <|.. WorkspaceSyncServiceImpl
WorkspaceSyncServiceImpl --> Workspace
WorkspaceSyncServiceImpl --> VCALENDAR
WorkspaceSyncServiceImpl --> VTODO
WorkspaceSyncServiceImpl --> VEVENT

IAlarmFactory <|.. AlarmFactoryImpl

AlarmFactoryImpl --> VALARM
AlarmFactoryImpl --> VEVENT : attachToEvent
AlarmFactoryImpl --> VTODO : attachToTask

ICalendarPermissionService <|.. CalendarPermissionServiceImpl
CalendarPermissionServiceImpl --> VCALENDAR
CalendarPermissionServiceImpl --> CalendarPermission
CalendarPermissionServiceImpl --> User

ICalendarSharingService <|.. CalendarSharingServiceImpl
CalendarSharingServiceImpl --> VCALENDAR
CalendarSharingServiceImpl --> CalendarShare
CalendarSharingServiceImpl --> User

ITimezoneFactory <|.. TimezoneFactoryImpl
TimezoneFactoryImpl --> VTIMEZONE
TimezoneFactoryImpl --> STANDARD
TimezoneFactoryImpl --> DAYLIGHT

IFreeBusyFactory <|.. FreeBusyFactoryImpl
FreeBusyFactoryImpl --> VFREEBUSY

ICalendarFactory <|.. CalendarFactoryImpl
IEventFactory <|.. EventFactoryImpl
IToDoFactory <|.. ToDoFactoryImpl
ICalendarService <|.. CalendarServiceImpl
IParticipationService <|.. ParticipationServiceImpl
ParticipationServiceImpl --> EventParticipation : manages
ParticipationServiceImpl --> VEVENT : modifies
ParticipationServiceImpl --> User : invites

CalendarFactoryImpl --> VCALENDAR
EventFactoryImpl --> VEVENT
ToDoFactoryImpl --> VTODO
CalendarServiceImpl --> VCALENDAR

}
@enduml
